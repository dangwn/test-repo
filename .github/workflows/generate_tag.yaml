name: Auto Tag on Master Push

on:
  push:
    branches:
      - main
      - master

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.check_message.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check Commit Message
        id: check_message
        run: |
          # Get the latest commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          
          # Check if the commit message matches the regex
          if [[ "$COMMIT_MESSAGE" =~ "Update version.txt to v.*" ]]; then
            echo "skip=1" >> $GITHUB_OUTPUT
          else
            echo "skip=0" >> $GITHUB_OUTPUT
          fi

  generate-version-number:
    runs-on: ubuntu-latest
    needs:
      - check-commit-message
    if: |
      always() && (needs.check-commit-message.outputs.skip == 0)
    outputs:
      tag_version: ${{ steps.calculate_tag.outputs.tag_version }}
      new_version_created: ${{ steps.calculate_tag.outputs.new_version_created }}
    env:
      VERSION_FILE: .github/workflows/version.txt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Read version from ${{ env.VERSION_FILE }}
        id: read_version
        run: |
          if [ -f ${{ env.VERSION_FILE }} ]; then
            version=$(cat ${{ env.VERSION_FILE }})
          else
            version="v0.0.0"
          fi
          echo "Current version: $version"
          echo "current_version=$version" >> $GITHUB_ENV
      - name: Calculate new tag
        id: calculate_tag
        run: |
          current_version=${{ env.current_version }}
          new_version_created=0

          tag_exists () {
              if git show-ref --tags --verify --quiet "refs/tags/$1"; then
                  echo 1
              else
                  echo 0
              fi
          }

          bump_tag () {
              IFS='.' read -r -a version_parts <<< "${1#v}"
              major=${version_parts[0]}
              minor=${version_parts[1]}
              patch=${version_parts[2]}
              new_patch=$((patch + 1))
              new_tag="v$major.$minor.$new_patch"
              echo $new_tag
          }

          while [ $(tag_exists $current_version) == "1" ];
          do
              current_version=$(bump_tag $current_version)
              new_version_created=1
          done

          echo "Tag version: $current_version"
          echo "tag_version=$current_version" >> $GITHUB_OUTPUT
          echo "new_version_created=$new_version_created" >> "$GITHUB_OUTPUT"

  update-version-file:
    runs-on: ubuntu-latest
    needs:
      - generate-version-number
    if: |
      always() && (needs.generate-version-number.outputs.new_version_created == 1)
    env:
      VERSION_FILE: .github/workflows/version.txt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
      - name: Update ${{ env.VERSION_FILE }}
        run: |
          echo "${{ needs.generate-version-number.outputs.tag_version }}" > ${{ env.VERSION_FILE }}
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git add ${{ env.VERSION_FILE }}
          git commit -m "Update version.txt to ${{ needs.generate-version-number.outputs.tag_version }}"
          git push
          echo "Version file: $(cat ${{ env.VERSION_FILE }})"

  create-tag:
    runs-on: ubuntu-latest
    needs:
      - generate-version-number
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        env:
          github_token:  ${{ secrets.PAT }}
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.generate-version-number.outputs.tag_version }}',
              sha: context.sha
            })

